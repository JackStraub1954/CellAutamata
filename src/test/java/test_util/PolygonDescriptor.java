package test_util;

import java.awt.geom.Path2D;
import java.awt.geom.Point2D;
import java.io.Serializable;

import com.gmail.johnstraub1954.cell_automata.geometry.Polygon;

/**
 * An instance of this class describes a path 
 * produced by a Polygon,
 * and the parameters used to generate the path.
 * It is used during testing, and test preparation.
 * 
 * @author java1
 *
 * @see app.PathDataCompiler
 */
public class PolygonDescriptor implements Serializable
{
	/** Generated serial version UID */
	private static final long serialVersionUID = 4468370367841976768L;
	
	/** Polygon representation (number of sides, length of sides) */
	public final Polygon	polygon;
	/** Center of polygon (for computing Path2D */
	public final Point2D	center;
	/** Angle of first vertex (for computing Path2D */
	public final double		angle;
	/** 
	 * Verified Path precomputed from above data; 
	 * used to compare against path computed during testing.
	 * (Cannot be raw Path2D, because Path2D doesn't implement serializable.)
	 */
	public final Path2D.Double	expPath;
	
	/**
	 * Constructor.
	 * 
	 * @param polygon	the base polygon to use for generating a path
	 * @param center	the center of the path calculated by the Polygon
	 * @param angle		the initial angle of the path calculated by the Polygon
	 * @param expPath	the verified path calculated by the Polygon
	 */
	public PolygonDescriptor( 
			Polygon polygon, 
			Point2D center, 
			double angle, 
			Path2D.Double expPath 
    )
	{
		this.polygon = polygon;
		this.center = center;
		this.angle = angle;
		this.expPath = expPath;
	}
	
	/**
	 * Given a Polygon, center point and initial angle,
	 * calculate a path and produce a PolygonDescriptor.
	 * This method is intended to be used as part of test preparation;
	 * it is assumed the Polygon.getPath()
	 * will produce a valid path.
	 * 
	 * @param polygon	Polygon to use to generate path
	 * @param center	the center of the path
	 * @param angle		the initial angle of the path
	 * 
	 * @return	object describing the given data,
	 *          and the path generated by the data
	 */
	public static PolygonDescriptor ofPolygon( 
			Polygon polygon, 
			Point2D center, 
			double angle
	)
	{
		Path2D				basePath	= polygon.getPath( center, angle );
		Path2D.Double		dblPath		= new Path2D.Double( basePath );
		PolygonDescriptor	descrip		=
			new PolygonDescriptor( polygon, center, angle, dblPath );
		return descrip;
	}
	
	/**
	 * Given a Polygon,
	 * and the encapsulated center and initial angle data,
	 * generate an "actual" path to be compared against
	 * the encapsulated "expected" path.
	 * 
	 * @param polygon	the given Polygon
	 * 
	 * @return	an "actual" path to be compared against
	 * 			the encapsulated "expected" path
	 */
	public Path2D getActualPath( Polygon polygon )
	{
		Path2D path	= polygon.getPath( center, angle );
		return path;
	}
	
	/**
	 * Given an "actual" path generated during testing,
	 * compare it to the encapsulated "expected" path
	 * generated during test preparation.
	 * 
	 * @param actPath	the path to compare to the encapsulated
	 * 					"expected" path
	 * @return	true if the given path is equal to
	 * 			the encapsulated "expected" path
	 */
	public boolean equals( Path2D actPath )
	{
		 boolean	result	= TestUtils.equals( actPath, expPath );
		 return result;
	}
	
	@Override
	public String toString()
	{
		double	xco			= center.getX();
		double  yco			= center.getY();
		double	side		= polygon.getSideLen();
		int		numSides	= polygon.getNumSides();
		String	fmt			=
			"center=(%.1f,%.1f,angle=%.1f,side=%.1f,#sides=%d";
		String	result		=
			String.format( fmt, xco, yco, angle, side, numSides );
		return result;
	}
}
